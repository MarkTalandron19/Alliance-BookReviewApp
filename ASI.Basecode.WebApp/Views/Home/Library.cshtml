@using ASI.Basecode.Data.Models
@model IEnumerable<ASI.Basecode.Data.Models.Book>
@{
    ViewBag.LoginView = true;
    ViewData["Title"] = "BiblioBibuli - Library";
}
@section styles {
    <link rel="stylesheet" href="~/css/userbookcatalog.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

}
<div class="navbar">
    <img class="bibliobibuli-logo" src="~/img/bibliobibuli logo 2.png" />
    <div class="navbar-right">
        <ul class="nav-links">
            <li><a href="/">Home</a></li>
            <li><a href="/Home/Library">Library</a></li>
        </ul>
    </div>
</div>
<div class="body-two-section">
    <div class="sidenav">
        <h2>Filter</h2>
        <h3>Categories</h3>
        <ul>
            @foreach (var genre in (IEnumerable<Genre>)ViewData["Genres"])
            {
                <li>
                    <a href="javascript:void(0);" data-genre-id="@genre.genreId">
                        <i class="fas fa-check-circle"></i> @genre.genreName
                    </a>
                </li>
            }
        </ul>
    </div>

    <div class="content">
        <div class="content-header">
            <div class="content-header-search">
                <h1>Books</h1>
                <div class="search-area">
                    <div class="search-bar">
                        <input type="text" id="bookSearch" placeholder="Search here..." />
                        <button class="search-icon"><i class="fas fa-search"></i></button>
                    </div>
                    <div class="searches-button">
                        <button class="search-button" style="background-color: #053B50; color: #FFFFFF;">Search</button>
                    </div>
                </div>
            </div>
            <div class="second-para">
                <p class="number-books-desc">Over 475+ books available here, find it now!</p>
                <div class="dropdown">
                    <button class="dropdown-button">Sort by ▼</button>
                    <div class="dropdown-content">
                        <a href="#">Title(A-Z)</a>
                        <a href="#">Rating(Highest)</a>
                    </div>
                </div>
            </div>
        </div>
        <div class="book-list">
            @foreach (var book in Model)
            {
                var reviews = ((IEnumerable<ASI.Basecode.Data.Models.Review>)ViewData["Reviews"]).Where(r => r.bookId == book.bookId);
                var bookgenres = ViewData["BookGenres"] as IEnumerable<ASI.Basecode.Data.Models.BookGenres>;
                if (bookgenres != null)
                {
                    bookgenres = bookgenres.Where(bg => bg.bookId == book.bookId);
                }


                var totalRatings = 0;
                var totalReviews = reviews.Count();
                var ratingsCount = new int[5];
                var genreIds = string.Join(",", book.BookGenres?.Select(bg => bg.genreId) ?? Enumerable.Empty<string>());

                foreach (var review in reviews)
                {
                    totalRatings += review.rating;
                    ratingsCount[review.rating - 1]++;
                }

                double[] percentages = new double[5];
                decimal averageRating = totalReviews > 0 ? (decimal)totalRatings / totalReviews : 0;
                decimal averageRatingRounded = Math.Round(averageRating, 1);
                int roundedRating = (int)Math.Round(averageRating);

                for (int i = 0; i < 5; i++)
                {
                    percentages[i] = totalReviews > 0 ? ((double)ratingsCount[i] / totalReviews) * 100 : 0;
                }

                <a asp-controller="Book" asp-action="BookDetail" asp-route-bookId="@book.bookId" class="book-link" data-book-id="@book.bookId" data-genres="@string.Join(",", book.BookGenres?.Select(bg => bg.genreId) ?? Enumerable.Empty<string>())">
                    <div class="book" data-genres="@string.Join(",", book.BookGenres?.Select(bg => bg.genreId) ?? Enumerable.Empty<string>())" data-book-id="@book.bookId">

                        <img src="@book.image" alt="Book Image" class="book-image" />
                        <div class="book-grade">
                            <div class="book-rating">★ @averageRatingRounded.ToString("0.0")</div>
                            <div>&nbsp;&nbsp;•</div>
                            <div class="book-reviews">@totalReviews.ToString("N0") reviews</div>
                        </div>
                        <div class="book-year">@book.pubYear</div>
                        <div class="book-title">@book.title</div>
                        <div class="book-author">@book.publisher</div>
                    </div>
                </a>
            }
        </div>
    </div>
</div>
<div class="contact-image-background-container">
    <img class="contact-info-image" src="~/img/contact section.png" alt="Contact Info Image" />
</div>
<div class="fifth-white-background">
    <div class="footer-first-col">
        <div class="logo-title">
            <img class="logo" src="~/img/bibliobibuli logo 3.png" />
            <h1>Bibliobibuli.</h1>
        </div>
        <div class="text-line">
            <p>Where Authors and Readers </p>
            <p>Toast to the Art of Literary </p>
            <p>Feasts!</p>

            <div class="contact-info">
                <p><i class="fas fa-envelope"></i> bibliobibuli_inquire@gmail.com</p>
                <p><i class="fas fa-phone"></i> +63 912 3456 789</p>
            </div>
        </div>
    </div>
    <div class="quick-links">
        <p class="text-quick-links">Quick Links</p>
        <div class="second-nav-links">
            <a href="/">Home</a>
            <a href="/Home/Library">Library</a>
        </div>
    </div>
</div>

@section scripts {
    <script>
        var errorMessage = '@TempData["ErrorMessage"]';
        if (errorMessage) {
            toastr.error(errorMessage);
        }

        document.addEventListener("DOMContentLoaded", function () {
            var genreLinks = document.querySelectorAll('.sidenav ul li a');

            genreLinks.forEach(function (link) {
                link.addEventListener('click', function (event) {
                    event.preventDefault();
                    var genreId = link.getAttribute('data-genre-id');
                    filterBooksByGenre(genreId);
                });
            });


            function filterBooksByGenre(genreId) {
                var allBooks = document.querySelectorAll('.book');

                allBooks.forEach(function (book) {
                    var bookId = book.getAttribute('data-book-id');
                    var genres = book.getAttribute('data-genres');

                    if (genres && genres.split(',').includes(genreId) && bookId) {
                        book.style.display = 'block';
                    } else {
                        book.style.display = 'none';
                    }
                });


            }

            document.getElementById('bookSearch').addEventListener('keyup', function (event) {
                if (event.key === 'Enter') {
                    searchBooks();
                }
            });

            document.querySelector('.search-button').addEventListener('click', function () {
                searchBooks();
            });

            document.querySelector('.search-icon').addEventListener('click', function () {
                searchBooks();
            });

            document.querySelector('.dropdown-content').addEventListener('click', function (event) {
                var sortOption = event.target.textContent.toLowerCase().trim();
                handleSortOption(sortOption);
            })

            function searchBooks() {
                var searchTerm = document.getElementById('bookSearch').value.toLowerCase().trim()
                var books = document.querySelectorAll('.book');

                books.forEach(function (book) {
                    var title = book.querySelector('.book-title').textContent.toLowerCase().trim();
                    var author = book.querySelector('.book-author').textContent.toLowerCase().trim();

                    if (title.includes(searchTerm) || author.includes(searchTerm)) {
                        book.style.display = 'block';
                    } else {
                        book.style.display = 'none';
                    }
                });
            }

          

            function handleSortOption(sortOption) {
                var sortingOptions = {
                    'title(a-z)': 'title',
                    'rating(highest)': 'rating'
                };

                var criteria = sortingOptions[sortOption];

                if (criteria) {
                    sortBooksBy(criteria);
                }
            }

            function sortBooksBy(criteria) {
                var bookList = document.querySelector('.book-list');
                var books = Array.from(bookList.querySelectorAll('.book'));

                books.sort(function (a, b) {
                    var valueA, valueB;

                    if (criteria === 'title') {
                        valueA = a.querySelector('.book-title').textContent.toLowerCase().trim();
                        valueB = b.querySelector('.book-title').textContent.toLowerCase().trim();
                    } else if (criteria === 'rating') {
                        valueA = parseFloat(a.querySelector('.book-rating').textContent.replace('★', '').trim());
                        valueB = parseFloat(b.querySelector('.book-rating').textContent.replace('★', '').trim());
                    }

                    return criteria === 'title' ? valueA.localeCompare(valueB) : valueB - valueA;
                });

                var fragment = document.createDocumentFragment();

                books.forEach(function (book) {
                    fragment.appendChild(book);
                });

                bookList.replaceChildren(fragment);

                books.forEach(function (book) {
                    book.style.display = 'block';
                });

                attachBookEventListeners();
            }
            function attachBookEventListeners() {
                var bookList = document.querySelector('.book-list');
                console.log('Book List:', bookList);

                bookList.addEventListener('click', function (event) {
                    var target = event.target.closest('.book');

                    if (!target && event.target.classList.contains('book')) {
                        target = event.target;
                    }

                    if (target) {
                        var bookId = target.getAttribute('data-book-id');
                        console.log('Book ID:', bookId);
                        window.location.href = '/books/BookDetail?bookId=' + bookId;
                    }
                });

                bookList.addEventListener('mouseover', function (event) {
                    var book = event.target.closest('.book');
                    if (book) {
                        book.style.cursor = 'pointer';
                    }
                });

                bookList.addEventListener('mouseout', function (event) {
                    var book = event.target.closest('.book');
                    if (book) {
                        book.style.cursor = 'default';
                    }
                });
            }
        });
    </script>
}
