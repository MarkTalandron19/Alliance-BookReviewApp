@using ASI.Basecode.Data.Models
@model IEnumerable<ASI.Basecode.Data.Models.Book>
@{
    ViewBag.LoginView = true;
    ViewData["Title"] = "BiblioBibuli - Library";
}
@section styles {
    <link rel="stylesheet" href="~/css/userbookcatalog.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

    }
<div class="navbar">
    <img class="bibliobibuli-logo" src="~/img/bibliobibuli logo 2.png" />
    <div class="navbar-right">
        <ul class="nav-links">
            <li><a href="/">Home</a></li>
            <li><a href="/Home/Library">Library</a></li>
        </ul>
    </div>
</div>
<div class="body-two-section">
    <div class="sidenav">
        <h2>Filter</h2>
        <h3>Categories</h3>
        <ul>
            @foreach (var genre in (IEnumerable<Genre>)ViewData["Genres"])
            {
                <li>
                    <a href="@Url.Action("FilterByGenre",  new { selectedGenre = genre.genreId })" class="genre-link" data-genre-id="@genre.genreId">
                        <i></i> @genre.genreName
                    </a>
                </li>
            }

        </ul>
    </div>

    <div class="content">
        <div class="content-header">
            <div class="content-header-search">
                <h1>Books</h1>
                    <form asp-controller="Home" asp-action="FilterByGenre" method="get">
                    <div class="search-area">
                            <div class="search-bar">
                            <input type="text" id="bookSearch" name="searchTerm" placeholder="Search here..." />
                            <button type="submit" class="search-icon" style="margin-left: 145px;"><i class="fas fa-search"></i></button>
                            </div>
                            <div class="searches-button">
                                <button class="search-button" type="submit" style="background-color: #053B50; color: #FFFFFF;">Search</button>
                            </div>
                    </div>
                     </form>
            </div>
            <div class="second-para">
                <p class="number-books-desc">Over 475+ books available here, find it now!</p>
                <div class="dropdown">
                    <button class="dropdown-button" id="sortButton">Sort by ▼</button>
                    <div class="dropdown-content">
                        <a href="?sortBy=title">Title(A-Z)</a>
                        <a href="?sortBy=rating">Rating(Highest)</a>
                    </div>
                </div>
            </div>
        </div>
        <div class="book-list">
            @if (Model.Any() || (ViewData["SearchResults"] != null && ((List<Book>)ViewData["SearchResults"]).Any()))
            {
                var booksToDisplay = ViewData["SearchResults"] != null ? (List<Book>)ViewData["SearchResults"] : Model;
                var selectedGenre = ViewData["SelectedGenre"] as string;

                var filteredBooks = booksToDisplay;

       
                if (!string.IsNullOrEmpty(selectedGenre))
                {
                    filteredBooks = booksToDisplay
                    .Where(book => book.BookGenres != null && book.BookGenres.Any(genre => genre.genre.genreId == selectedGenre))
                    .ToList();
                    
                }
            
                foreach (var book in booksToDisplay)
                {
                    var reviews = ((IEnumerable<ASI.Basecode.Data.Models.Review>)ViewData["Reviews"]).Where(r => r.bookId == book.bookId);
                    var bookgenres = ViewData["BookGenres"] as IEnumerable<ASI.Basecode.Data.Models.BookGenres>;
                    if (bookgenres != null)
                    {
                        bookgenres = bookgenres.Where(bg => bg.bookId == book.bookId);
                    }

                    var totalRatings = 0;
                    var totalReviews = reviews.Count();
                    var ratingsCount = new int[5];
                    var genreIds = string.Join(",", book.BookGenres?.Select(bg => bg.genreId) ?? Enumerable.Empty<string>());

                    foreach (var review in reviews)
                    {
                        totalRatings += review.rating;
                        ratingsCount[review.rating - 1]++;
                    }

                    double[] percentages = new double[5];
                    decimal averageRating = totalReviews > 0 ? (decimal)totalRatings / totalReviews : 0;
                    decimal averageRatingRounded = Math.Round(averageRating, 1);
                    int roundedRating = (int)Math.Round(averageRating);

                    for (int i = 0; i < 5; i++)
                    {
                        percentages[i] = totalReviews > 0 ? ((double)ratingsCount[i] / totalReviews) * 100 : 0;
                    }

                    <a asp-controller="Book" asp-action="BookDetail" asp-route-bookId="@book.bookId" class="book-link" data-book-id="@book.bookId" data-genres="@string.Join(",", book.BookGenres?.Select(bg => bg.genreId) ?? Enumerable.Empty<string>())">
                        <div class="book" data-genres="@string.Join(",", book.BookGenres?.Select(bg => bg.genreId) ?? Enumerable.Empty<string>())" data-book-id="@book.bookId">

                            <img src="@book.image" alt="Book Image" class="book-image" />
                            <div class="book-grade">
                                <div class="book-rating">★ @averageRatingRounded.ToString("0.0")</div>
                                <div>&nbsp;&nbsp;•</div>
                                <div class="book-reviews">@totalReviews.ToString("N0") reviews</div>
                            </div>
                            <div class="book-year">@book.pubYear</div>
                            <div class="book-title">@book.title</div>
                            <div class="book-author">@book.publisher</div>
                        </div>
                    </a>
                }
                selectedGenre = null;
            }
            else
            {
                @if (ViewData["SearchTerm"] != null)
                {
                    var searchTerm = ViewData["SearchTerm"] as string;

                    <p> "@searchTerm" Not Found</p>
                }
            }
        </div>
        <div class="paginations">
            @if (ViewData["TotalPages"] != null && int.TryParse(ViewData["CurrentPage"].ToString(), out int currentPage) && int.TryParse(ViewData["TotalPages"].ToString(), out int totalPages) && totalPages > 1)
            {
                <nav aria-label="Books Pagination">
                    <ul class="pagination">
                        <!-- First and Previous -->
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <a class="page-link" href="?page=1@(ViewData["SortBy"] != null ? $"&sortBy={ViewData["SortBy"]}" : "")" aria-label="First">
                                <span aria-hidden="true">&laquo;&laquo;</span>
                            </a>
                        </li>
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <a class="page-link" href="?page=@(currentPage - 1)@(ViewData["SortBy"] != null ? $"&sortBy={ViewData["SortBy"]}" : "")" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>

                        @for (int i = 1; i <= totalPages; i++)
                        {
                            <li class="page-item @(i == currentPage ? "active" : "")">
                                <a class="page-link" href="?page=@i@(ViewData["SortBy"] != null ? $"&sortBy={ViewData["SortBy"]}" : "")">@i</a>
                            </li>
                        }

                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <a class="page-link" href="?page=@(currentPage + 1)@(ViewData["SortBy"] != null ? $"&sortBy={ViewData["SortBy"]}" : "")" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <a class="page-link" href="?page=@totalPages@(ViewData["SortBy"] != null ? $"&sortBy={ViewData["SortBy"]}" : "")" aria-label="Last">
                                <span aria-hidden="true">&raquo;&raquo;</span>
                            </a>
                        </li>
                    </ul>
                </nav>
            }
        </div>
    </div>
</div>
<div class="contact-image-background-container">
    <img class="contact-info-image" src="~/img/contact section.png" alt="Contact Info Image" />
</div>
<div class="fifth-white-background">
    <div class="footer-first-col">
        <div class="logo-title">
            <img class="logo" src="~/img/bibliobibuli logo 3.png" />
            <h1>Bibliobibuli.</h1>
        </div>
        <div class="text-line">
            <p>Where Authors and Readers </p>
            <p>Toast to the Art of Literary </p>
            <p>Feasts!</p>

            <div class="contact-info">
                <p><i class="fas fa-envelope"></i> bibliobibuli_inquire@gmail.com</p>
                <p><i class="fas fa-phone"></i> +63 912 3456 789</p>
            </div>
        </div>
    </div>
    <div class="quick-links">
        <p class="text-quick-links">Quick Links</p>
        <div class="second-nav-links">
            <a href="/">Home</a>
            <a href="/Home/Library">Library</a>
        </div>
    </div>
</div>

@section scripts {
    <script>
        var errorMessage = '@TempData["ErrorMessage"]';
        if (errorMessage) {
            toastr.error(errorMessage);
        }
    </script>
    }
