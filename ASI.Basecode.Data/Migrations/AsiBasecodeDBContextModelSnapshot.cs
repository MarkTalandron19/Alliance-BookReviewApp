// <auto-generated />
using System;
using ASI.Basecode.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ASI.Basecode.Data.Migrations
{
    [DbContext(typeof(AsiBasecodeDBContext))]
    partial class AsiBasecodeDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ASI.Basecode.Data.Models.Author", b =>
                {
                    b.Property<string>("authorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("authorFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("authorLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("authorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            authorId = "1",
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            authorFirstName = "John",
                            authorLastName = "Doe"
                        },
                        new
                        {
                            authorId = "2",
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            authorFirstName = "Jane",
                            authorLastName = "Smith"
                        },
                        new
                        {
                            authorId = "3",
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            authorFirstName = "Robert",
                            authorLastName = "Johnson"
                        },
                        new
                        {
                            authorId = "4",
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            authorFirstName = "Emily",
                            authorLastName = "Williams"
                        },
                        new
                        {
                            authorId = "5",
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            authorFirstName = "David",
                            authorLastName = "Brown"
                        });
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.AuthoredBooks", b =>
                {
                    b.Property<string>("bookId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("authorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("bookId", "authorId");

                    b.HasIndex("authorId");

                    b.ToTable("Authored_Books");

                    b.HasData(
                        new
                        {
                            bookId = "1",
                            authorId = "1",
                            Id = 0
                        },
                        new
                        {
                            bookId = "2",
                            authorId = "2",
                            Id = 0
                        },
                        new
                        {
                            bookId = "3",
                            authorId = "3",
                            Id = 0
                        },
                        new
                        {
                            bookId = "4",
                            authorId = "4",
                            Id = 0
                        },
                        new
                        {
                            bookId = "5",
                            authorId = "5",
                            Id = 0
                        });
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.Book", b =>
                {
                    b.Property<string>("bookId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("isbn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("pubYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("synopsis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("bookId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            bookId = "1",
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isbn = "ISBN-1",
                            language = "English",
                            pubYear = new DateTime(2023, 10, 27, 19, 10, 28, 160, DateTimeKind.Local).AddTicks(5771),
                            publisher = "Publisher 1",
                            synopsis = "Synopsis 1",
                            title = "Book 1"
                        },
                        new
                        {
                            bookId = "2",
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isbn = "ISBN-2",
                            language = "French",
                            pubYear = new DateTime(2023, 10, 27, 19, 10, 28, 160, DateTimeKind.Local).AddTicks(5788),
                            publisher = "Publisher 2",
                            synopsis = "Synopsis 2",
                            title = "Book 2"
                        },
                        new
                        {
                            bookId = "3",
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isbn = "ISBN-3",
                            language = "Spanish",
                            pubYear = new DateTime(2023, 10, 27, 19, 10, 28, 160, DateTimeKind.Local).AddTicks(5790),
                            publisher = "Publisher 3",
                            synopsis = "Synopsis 3",
                            title = "Book 3"
                        },
                        new
                        {
                            bookId = "4",
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isbn = "ISBN-4",
                            language = "German",
                            pubYear = new DateTime(2023, 10, 27, 19, 10, 28, 160, DateTimeKind.Local).AddTicks(5793),
                            publisher = "Publisher 4",
                            synopsis = "Synopsis 4",
                            title = "Book 4"
                        },
                        new
                        {
                            bookId = "5",
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isbn = "ISBN-5",
                            language = "Italian",
                            pubYear = new DateTime(2023, 10, 27, 19, 10, 28, 160, DateTimeKind.Local).AddTicks(5795),
                            publisher = "Publisher 5",
                            synopsis = "Synopsis 5",
                            title = "Book 5"
                        });
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.BookGenres", b =>
                {
                    b.Property<string>("bookId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("genreId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("bookId", "genreId");

                    b.HasIndex("genreId");

                    b.ToTable("Book_Genres");

                    b.HasData(
                        new
                        {
                            bookId = "1",
                            genreId = "1",
                            Id = 0
                        },
                        new
                        {
                            bookId = "2",
                            genreId = "2",
                            Id = 0
                        },
                        new
                        {
                            bookId = "3",
                            genreId = "3",
                            Id = 0
                        },
                        new
                        {
                            bookId = "4",
                            genreId = "4",
                            Id = 0
                        },
                        new
                        {
                            bookId = "5",
                            genreId = "5",
                            Id = 0
                        });
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.Genre", b =>
                {
                    b.Property<string>("genreId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("genreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("genreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            genreId = "1",
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "Exploring futuristic concepts",
                            genreName = "Science Fiction"
                        },
                        new
                        {
                            genreId = "2",
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "Intriguing puzzles and suspense",
                            genreName = "Mystery"
                        },
                        new
                        {
                            genreId = "3",
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "Imaginary worlds and magical elements",
                            genreName = "Fantasy"
                        },
                        new
                        {
                            genreId = "4",
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "Love and relationships",
                            genreName = "Romance"
                        },
                        new
                        {
                            genreId = "5",
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "Intense suspense and excitement",
                            genreName = "Thriller"
                        });
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.Review", b =>
                {
                    b.Property<string>("reviewId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("bookId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("dateReviewed")
                        .HasColumnType("datetime2");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.Property<string>("reviewerEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("reviewerFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("reviewerLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("reviewId");

                    b.HasIndex("bookId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "UQ__Users__1788CC4D5F4A160F")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.AuthoredBooks", b =>
                {
                    b.HasOne("ASI.Basecode.Data.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("authorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASI.Basecode.Data.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.BookGenres", b =>
                {
                    b.HasOne("ASI.Basecode.Data.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASI.Basecode.Data.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("genreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASI.Basecode.Data.Models.Review", b =>
                {
                    b.HasOne("ASI.Basecode.Data.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("bookId");
                });
#pragma warning restore 612, 618
        }
    }
}
